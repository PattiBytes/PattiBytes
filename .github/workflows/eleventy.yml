# Workflow Name: Clearly identifies what this workflow does
name: Deploy Eleventy to GitHub Pages

# When the workflow should run:
# It triggers on pushes to the 'main' branch.
# This means every time you commit and push changes to your 'main' branch
# (whether from the GitHub web interface or locally), this workflow will run.
on:
  push:
    branches:
      - main # Replace 'main' with your default branch name if it's different (e.g., 'master')
# ADD THIS BLOCK HERE:
permissions:
  contents: write # Allows the action to write files to the repository
  pages: write    # Specifically allows the action to manage GitHub Pages deployments
  id-token: write # Required for some advanced GitHub Pages setups, good to include

# Jobs: A workflow is made up of one or more jobs that run in parallel by default.
jobs:
  build-and-deploy:
    # Operating system for the job to run on. Ubuntu is a common choice for Node.js builds.
    runs-on: ubuntu-latest

    # Steps: A job contains a sequence of tasks called steps.
    steps:
      # Step 1: Checkout the repository code.
      # This action brings your repository's content onto the GitHub Actions runner.
      - name: Checkout code
        uses: actions/checkout@v4 # Uses the official checkout action

      # Step 2: Set up Node.js environment.
      # This action installs a specific version of Node.js on the runner.
      - name: Setup Node.js
        uses: actions/setup-node@v4 # Uses the official setup-node action
        with:
          node-version: '20' # Specify the Node.js version. '20' is a good stable choice.
                            # You can change this if your project requires a different version.

      # Step 3: Install project dependencies.
      # This runs 'npm install' based on your package.json file.
      # It will install Eleventy and any other 'devDependencies' you have.
      - name: Install dependencies
        run: npm install

      # Step 4: Build the Eleventy site.
      # This executes the 'build' script defined in your package.json.
      # For Eleventy, this typically runs `npx @11ty/eleventy` to generate your static files
      # into the output directory (e.g., '_site').
      - name: Build Eleventy site
        run: npm run build # Assumes you have "build": "npx @11ty/eleventy" in package.json

      # Step 5: Deploy the built site to GitHub Pages.
      # This step uses a popular community action specifically designed for GitHub Pages deployment.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4 # Third-party action for deployment
        with:
          # Your GitHub token is automatically provided by GitHub Actions for security.
          # It grants permissions for the action to push to your repository.
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # The directory containing the static files to publish.
          # Ensure this matches the 'output' directory specified in your .eleventy.js
          # (which is '_site' by default for Eleventy).
          publish_dir: ./_site 
          
          # The branch to which the built site should be pushed.
          # GitHub Pages is often configured to serve from a 'gh-pages' branch.
          # If you configured GitHub Pages to serve from the '/docs' folder on your 'main' branch,
          # you would remove this line or change it to `publish_branch: main` and ensure
          # your GitHub Pages setting points to the `/docs` folder.
          publish_branch: gh-pages
