name: Send Webpushr Notifications (on _notifications changes)

# Trigger only when _notifications/ files are changed on push to main
on:
  push:
    branches: [ "main" ]
    paths:
      - '_notifications/**'

jobs:
  send-notifications:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # full history makes diffs reliable

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Find changed _notifications files
        id: changed
        run: |
          # use git diff between commit range to list changed files under _notifications/
          files=$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" | grep '^_notifications/' || true)
          # export as multiline output
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send notifications (Python)
        env:
          WEBPUSHR_KEY: ${{ secrets.WEBPUSHR_KEY }}
          WEBPUSHR_AUTH: ${{ secrets.WEBPUSHR_AUTH }}
          SITE_URL: ${{ secrets.SITE_URL }}   # e.g. https://pattibytes.com
          FILES: ${{ steps.changed.outputs.files }}
        run: |
          python - <<'PY'
import os, sys, re, yaml, json, requests, time

FILES = os.getenv('FILES', '').strip()
if not FILES:
    print("No changed notification files found - exiting")
    sys.exit(0)

WEBPUSHR_KEY = os.getenv('WEBPUSHR_KEY')
WEBPUSHR_AUTH = os.getenv('WEBPUSHR_AUTH')
SITE_URL = os.getenv('SITE_URL', '').rstrip('/')

if not WEBPUSHR_KEY or not WEBPUSHR_AUTH or not SITE_URL:
    print("Missing one of required env vars: WEBPUSHR_KEY, WEBPUSHR_AUTH, SITE_URL")
    sys.exit(1)

def parse_frontmatter(path):
    with open(path, 'r', encoding='utf-8') as fh:
        txt = fh.read()
    m = re.match(r'---\s*\n(.*?\n)---\s*\n', txt, re.S)
    if not m:
        return {}
    try:
        return yaml.safe_load(m.group(1)) or {}
    except Exception as e:
        print("YAML parse error in", path, e)
        return {}

def build_target_url(raw):
    if not raw:
        return SITE_URL + '/'
    raw = str(raw).strip()
    if raw.startswith('http://') or raw.startswith('https://'):
        return raw
    if raw.startswith('/'):
        return SITE_URL + raw
    # assume path
    return SITE_URL + '/' + raw

def send_post(url, payload):
    headers = {
        "webpushrKey": WEBPUSHR_KEY,
        "webpushrAuthToken": WEBPUSHR_AUTH,
        "Content-Type": "application/json"
    }
    try:
        resp = requests.post(url, json=payload, headers=headers, timeout=30)
        print("POST", url, "payload:", json.dumps(payload, ensure_ascii=False))
        print("HTTP", resp.status_code, resp.text)
        return resp
    except Exception as e:
        print("Request error for", url, e)
        return None

# iterate files (one-per-line)
for p in FILES.splitlines():
    p = p.strip()
    if not p:
        continue
    if not os.path.exists(p):
        print("Skipped (not found):", p)
        continue

    fm = parse_frontmatter(p)
    print("Processing:", p, "frontmatter:", json.dumps(fm, ensure_ascii=False))

    # Backwards-compat / field names from your admin/config.yml:
    send_now = fm.get('send_now', True) or fm.get('send_notification', False)
    if not send_now:
        print("send_now false — skipping", p)
        continue

    audience = (fm.get('audience') or 'all').lower()
    title = fm.get('title') or fm.get('Notification Title') or "Patti Bytes"
    message = fm.get('message') or fm.get('push_message') or fm.get('preview') or title
    target = build_target_url(fm.get('target_url') or '/')
    icon = None
    if fm.get('image'):
        # if image is relative path (Netlify CMS), ensure SITE_URL prefix
        img = str(fm.get('image'))
        if img.startswith('http'):
            icon = img
        elif img.startswith('/'):
            icon = SITE_URL + img
        else:
            icon = SITE_URL + '/' + img

    # Send according to audience
    if audience == 'all':
        url = "https://api.webpushr.com/v1/notification/send/all"
        payload = {"title": title, "message": message, "target_url": target}
        if icon:
            payload["icon"] = icon
        send_post(url, payload)

    elif audience == 'segment':
        seg = fm.get('segment_tag') or fm.get('segment') or fm.get('segmentName')
        if not seg:
            print("No 'segment_tag' found in frontmatter — skipping segment send for", p)
            continue
        url = "https://api.webpushr.com/v1/notification/send/segment"
        payload = {"title": title, "message": message, "target_url": target, "segment": seg}
        if icon:
            payload["icon"] = icon
        send_post(url, payload)

    elif audience == 'specific':
        # expects frontmatter field specific_subscribers: list of objects or strings
        subs = fm.get('specific_subscribers') or []
        # support both list-of-strings and list-of-dicts with 'subscriber'
        sids = []
        for item in subs:
            if isinstance(item, dict):
                v = item.get('subscriber')
            else:
                v = item
            if v is None:
                continue
            vs = str(v).strip()
            # Webpushr expects sid numeric id; we'll try to send each as sid
            sids.append(vs)
        if not sids:
            print("No subscriber IDs found in specific_subscribers for", p)
            continue
        for sid in sids:
            url = "https://api.webpushr.com/v1/notification/send/sid"
            payload = {"title": title, "message": message, "target_url": target, "sid": sid}
            if icon:
                payload["icon"] = icon
            send_post(url, payload)
            # be gentle with the API (avoid hitting rate limits)
            time.sleep(0.5)
    else:
        print("Unknown audience:", audience, " — skipping", p)

print("Done.")
PY
