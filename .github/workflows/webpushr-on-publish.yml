name: Send Webpushr Notifications (on _notifications changes)

on:
  push:
    paths:
      - '_notifications/**'

jobs:
  send-notifications:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Find changed _notifications files
        id: changed
        run: |
          CHANGED=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep '^_notifications/' || true)
          echo "files=$CHANGED" >> $GITHUB_OUTPUT

      - name: Send notifications (Python)
        env:
          WEBPUSHR_KEY: ${{ secrets.WEBPUSHR_KEY }}
          WEBPUSHR_AUTH: ${{ secrets.WEBPUSHR_AUTH }}
          SITE_URL: ${{ secrets.SITE_URL }}
          FILES: ${{ steps.changed.outputs.files }}
        run: |
          python - <<'PY'
import os, re, yaml, requests, sys, json
files = os.getenv('FILES','').split()
if not files:
    print("No changed notification files - exiting")
    sys.exit(0)

WEBPUSHR_KEY = os.environ['WEBPUSHR_KEY']
WEBPUSHR_AUTH = os.environ['WEBPUSHR_AUTH']
SITE_URL = os.environ['SITE_URL'].rstrip('/')

def parse_frontmatter(path):
    with open(path, 'r', encoding='utf-8') as fh:
        txt = fh.read()
    if not txt.startswith('---'):
        return {}
    parts = txt.split('---', 2)
    if len(parts) < 3:
        return {}
    return yaml.safe_load(parts[1]) or {}

for p in files:
    if not os.path.exists(p):
        continue
    fm = parse_frontmatter(p)
    print("Frontmatter from", p, ":", json.dumps(fm, ensure_ascii=False))
    if not fm.get('send_now', True):
        print("send_now is false â†’ skipping", p)
        continue

    title = fm.get('title', 'Patti Bytes')
    message = fm.get('message') or fm.get('preview') or title
    target = fm.get('target_url') or '/'
    if not target.startswith('http'):
        target = SITE_URL + target

    payload = {"title": title, "message": message, "target_url": target}
    headers = {
        "webpushrKey": WEBPUSHR_KEY,
        "webpushrAuthToken": WEBPUSHR_AUTH,
        "Content-Type": "application/json"
    }

    print("Sending notification:", json.dumps(payload, ensure_ascii=False))
    resp = requests.post("https://api.webpushr.com/v1/notification/send/all",
                         json=payload, headers=headers, timeout=30)
    print("HTTP", resp.status_code, resp.text)
PY
